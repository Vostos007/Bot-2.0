from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from telegram.ext import ContextTypes, ConversationHandler
from telegram_calendar_keyboard import CallbackData, create_calendar
from datetime import datetime
import os

from ..notion_service import NotionService
from ..constants import MESSAGES, TASK_STATUSES

# States for conversation handler
TITLE, ASSIGNEE, DUE_DATE, STATUS, PRIORITY, CONFIRM = range(6)

class CommandHandlers:
    def __init__(self, notion_service: NotionService):
        self.notion = notion_service
        self.calendar_callback = CallbackData("calendar", "action", "year", "month", "day")

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handles /start command"""
        keyboard = [
            [InlineKeyboardButton("üìã –ó–∞–¥–∞—á–∏", callback_data="view_tasks"),
             InlineKeyboardButton("‚ûï –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞", callback_data="new_task")],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        await update.message.reply_text(
            MESSAGES["welcome"],
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return ConversationHandler.END

    async def help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handles /help command"""
        help_text = """üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/new - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
/tasks - –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/restart - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ

üîπ –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏:
- –ú–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å –ø–æ–ª—è, –Ω–∞–∂–∏–º–∞—è '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'
- –ú–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /cancel
"""
        await update.message.reply_text(help_text)
        return ConversationHandler.END

    async def restart(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handles /restart command"""
        await update.message.reply_text("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        os.system('systemctl restart telegram-bot.service')
        return ConversationHandler.END

    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handles /cancel command"""
        await update.message.reply_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=None)
        return ConversationHandler.END

    async def start_new_task(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Start new task creation"""
        await update.message.reply_text("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
        return TITLE

    async def handle_task_title(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle task title input"""
        context.user_data['title'] = update.message.text
        
        # Get workspace members
        members = await self.notion.get_workspace_members()
        keyboard = [
            [InlineKeyboardButton(member['name'], callback_data=f"assign_{member['id']}")] 
            for member in members
            if member['type'] in ['member', 'guest']
        ]
        keyboard.append([InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_assignee")])
        
        await update.message.reply_text(
            "üë§ –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return ASSIGNEE

    async def handle_assignee(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle assignee selection"""
        query = update.callback_query
        await query.answer()
        
        if query.data != "skip_assignee":
            context.user_data['assignee_id'] = query.data.split('_')[1]
            
        # Show calendar for due date
        calendar, step = create_calendar()
        await query.message.reply_text(
            "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:",
            reply_markup=calendar
        )
        return DUE_DATE